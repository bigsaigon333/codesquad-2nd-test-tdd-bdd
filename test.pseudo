단어_밀어내기_기능: BDD() {
  Given("사용자는 프로그램을 터미널에서 실행한 상황에서") {

    When(" 단어 하나, 정수 숫자 하나( -100 <= N < 100) , L 또는 R을 CLI 입력창에 입력하고 Enter키를 입력하면") {
      CLI 입력창에서 Enter키가 아닌 EOF, Ctrl + D, Ctrl + Z, Ctrl + C 가 입력되었을 경우를 테스트: BDD
      GOTO: 사용자의_입력_검증: TDD 
      
      Then("주어진 단어를 L이면 주어진 숫자 갯수만큼 왼쪽으로, R이면 오른쪽으로 밀어내고 밀려나간 단어는 반대쪽으로 채운 후 터미널에 표시된다. ") {
        GOTO: 유효한_사용자의_입력에_따른_단어_밀어내기_기능_검증: TDD
      }
    }
  }
}


GOTO: 사용자의_입력_검증: TDD {
  test("사용자의 입력은 스페이스(` `)로 구별되는 3개의 문자열으로 구성되어 있다.") {
    expect(hasThreeWords("ab cd ef")).toBeTruthy();
    expect(hasThreeWords("ab cd")).toBeFalsy();
  }

  test("사용자의 입력 중 두번째 문자열(`정수 숫자 하나`)는 -100 이상 100 미만이어야 한다.", {
    expect(isValidInteger(3)).toBeTruthy();
    expect(isValidInteger(-50)).toBeTruthy();
    
    expect(isValidInteger(-101)).toBeFalsy();
    expect(isValidInteger(100)).toBeFalsy();
    expect(isValidInteger(0.5)).toBeFalsy();
  });

  test("사용자의 입력 중 세번째 문자열은 `l`, `L`, `R`,`r` 중 하나이다.", {
    expect(isValidLorR("l")).toBeTruthy();
    expect(isValidLorR("L")).toBeTruthy();
    expect(isValidLorR("R")).toBeTruthy();
    expect(isValidLorR("r")).toBeTruthy();
    
    expect(isValidLorR("lL")).toBeFalsy();
    expect(isValidLorR("R3")).toBeFalsy();
  });

  test("사용자의 입력은 `단어 하나, 정수 숫자 하나(-100 <= N < 100), L 또는 R(대소문자 모두 가능)`로 구성되어 있어야 한다.", {
    expect(isValidUserInput("apple 3 L")).toBeTruthy();
    expect(isValidUserInput("banana 6 R")).toBeTruthy();
    expect(isValidUserInput("carrot -1 r")).toBeTruthy();
    expect(isValidUserInput("cat -4 R")).toBeTruthy();

    expect(isValidUserInput("apple 333 L")).toBeFalsy();
    expect(isValidUserInput("banana *6 R")).toBeFalsy();
    expect(isValidUserInput("carrot -1 rrr")).toBeFalsy();
    expect(isValidUserInput("c4t -4 R")).toBeFalsy();
  });
}

GOTO: 유효한_사용자의_입력에_따른_단어_밀어내기_기능_검증: TDD {

}
